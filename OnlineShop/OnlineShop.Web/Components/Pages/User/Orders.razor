@page "/user/myorders"

@rendermode InteractiveServer

@inject SalesOrderApiClient SalesOrderApiClient
@inject IToastService ToastService
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ILogger<Orders> _logger


<FluentStack Orientation="Orientation.Vertical">
    <h1>My Orders</h1>
    <FluentStack>
        <FluentDataGrid Class="fluent-datagrid-orders" MultiLine="true" Items="salesOrders?.AsQueryable()" RowSize="DataGridRowSize.Medium">
            <PropertyColumn Sortable="true" InitialSortDirection="SortDirection.Descending" Class="fluent-table-invisible" Property="@(p => p.Id)" />
            <PropertyColumn Class="fluent-table-invisible" Title="Recipient" Property="@(p => p.ShipName)" />
            <PropertyColumn Sortable="true" Property="@(p => p.OrderDate)" />
            <PropertyColumn Property="@(p => p.ShippedDate)" />
            <PropertyColumn Class="fluent-table-invisible" Title="Products" Property="@(p => p.OrderItems.Count())" />
            <PropertyColumn Title="Total" Property="@(p => p.OrderItems.Sum(x => (x.Quantity * x.UnitPrice)))" />
            <TemplateColumn>
                <FluentButton OnClick="@(() => DownloadInvoice(context))"><FluentIcon Value="@(new Icons.Regular.Size20.ArrowDownload())" /></FluentButton>
            </TemplateColumn>
        </FluentDataGrid>
    </FluentStack>
</FluentStack>


@code{
    private List<SalesOrderDTO> salesOrders { get; set; }

    private IJSObjectReference downloadScript;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            salesOrders = await SalesOrderApiClient.GetSalesOrdersForCustomer();
            if(salesOrders == null)
            {
                ToastService.ShowError("There was a problem while getting your orders. Please try again!");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("Error while trying to get list of sales orders for customer. Error: " + ex.ToString());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            downloadScript = await JS.InvokeAsync<IJSObjectReference>("import", "/js/filedownload.js");
        }
    }

    private async Task DownloadInvoice(SalesOrderDTO order)
    {
        try
        {
            var url = await SalesOrderApiClient.GetOrderInvoiceAsync(order);
            if (!string.IsNullOrEmpty(url))
            {
                await downloadScript.InvokeVoidAsync("downloadFile", url, $"invoice_{order.Id}.pdf");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("Error wile trying downloading invoice. Error:" + ex.ToString());
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (downloadScript != null)
        {
            await downloadScript.DisposeAsync();
        }
    }
}