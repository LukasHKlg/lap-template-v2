@page "/weather"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]
@rendermode InteractiveServer

@inject IToastService ToastService
@inject WeatherApiClient WeatherApi
@inject ILogger<Weather> _logger

@attribute [Authorize]


<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

	@if (forecasts == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th aria-label="Temperature in Celsius">Temp. (C)</th>
				<th aria-label="Temperature in Farenheit">Temp. (F)</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var forecast in forecasts)
			{
				<tr>
					<td>@forecast.Date.ToShortDateString()</td>
					<td>@forecast.TemperatureC</td>
					<td>@forecast.TemperatureF</td>
					<td>@forecast.Summary</td>
				</tr>
			}
		</tbody>
	</table>
}


@code {
	private WeatherForecastDTO[]? forecasts;

	protected override async Task OnInitializedAsync()
	{

	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				forecasts = await WeatherApi.GetWeatherAsync();
			}
			catch (Exception ex)
			{
				ToastService.ShowError("Error while getting weather data.");
				_logger.LogError("Error while getting Weather async. Error: " + ex.ToString());
			}
			StateHasChanged();
		}
	}
}
