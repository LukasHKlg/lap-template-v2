// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.ApiService.Data;

#nullable disable

namespace OnlineShop.ApiService.Migrations
{
    [DbContext(typeof(UserDbContext))]
    partial class UserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.BillingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BillingAddresses");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            City = "Springfield",
                            Country = "USA",
                            HouseNum = "2B",
                            State = "IL",
                            Street = "456 Elm St",
                            ZipCode = "62704"
                        });
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TotalPrice = 1500.0
                        });
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            Price = 1500.0,
                            ProductId = 1,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CartId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            BillingAddressId = 2,
                            CartId = 1,
                            FirstName = "Andre",
                            LastName = "Ludwig",
                            PhoneNumber = "555-1234",
                            ShippingAddressId = 1
                        });
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1,
                            UnitPrice = 40.200000000000003
                        });
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Electronics",
                            Description = "A powerful laptop",
                            Manufacturer = "Dell",
                            Name = "Laptop",
                            Price = 1500.0,
                            Stock = 20
                        },
                        new
                        {
                            Id = 2,
                            Category = "Electronics",
                            Description = "Latest model smartphone",
                            Manufacturer = "Samsung",
                            Name = "Smartphone",
                            Price = 800.0,
                            Stock = 50
                        },
                        new
                        {
                            Id = 3,
                            Category = "Electronics",
                            Description = "Portable tablet for everyday use",
                            Manufacturer = "Apple",
                            Name = "Tablet",
                            Price = 600.0,
                            Stock = 30
                        },
                        new
                        {
                            Id = 4,
                            Category = "Wearables",
                            Description = "Wearable smart device",
                            Manufacturer = "Fitbit",
                            Name = "Smartwatch",
                            Price = 250.0,
                            Stock = 40
                        },
                        new
                        {
                            Id = 5,
                            Category = "Audio",
                            Description = "Noise-cancelling headphones",
                            Manufacturer = "Bose",
                            Name = "Headphones",
                            Price = 300.0,
                            Stock = 15
                        },
                        new
                        {
                            Id = 6,
                            Category = "Photography",
                            Description = "Digital SLR camera",
                            Manufacturer = "Canon",
                            Name = "Camera",
                            Price = 1200.0,
                            Stock = 10
                        },
                        new
                        {
                            Id = 7,
                            Category = "Office",
                            Description = "Wireless printer",
                            Manufacturer = "HP",
                            Name = "Printer",
                            Price = 200.0,
                            Stock = 25
                        },
                        new
                        {
                            Id = 8,
                            Category = "Computers",
                            Description = "4K Ultra HD monitor",
                            Manufacturer = "LG",
                            Name = "Monitor",
                            Price = 400.0,
                            Stock = 18
                        },
                        new
                        {
                            Id = 9,
                            Category = "Computers",
                            Description = "Mechanical keyboard",
                            Manufacturer = "Logitech",
                            Name = "Keyboard",
                            Price = 100.0,
                            Stock = 35
                        },
                        new
                        {
                            Id = 10,
                            Category = "Computers",
                            Description = "Wireless mouse",
                            Manufacturer = "Microsoft",
                            Name = "Mouse",
                            Price = 50.0,
                            Stock = 45
                        },
                        new
                        {
                            Id = 11,
                            Category = "Gaming",
                            Description = "Next-gen gaming console",
                            Manufacturer = "Sony",
                            Name = "Gaming Console",
                            Price = 500.0,
                            Stock = 22
                        },
                        new
                        {
                            Id = 12,
                            Category = "Gaming",
                            Description = "Immersive virtual reality experience",
                            Manufacturer = "Oculus",
                            Name = "VR Headset",
                            Price = 350.0,
                            Stock = 12
                        },
                        new
                        {
                            Id = 13,
                            Category = "Networking",
                            Description = "High-speed wireless router",
                            Manufacturer = "Netgear",
                            Name = "Router",
                            Price = 150.0,
                            Stock = 28
                        },
                        new
                        {
                            Id = 14,
                            Category = "Computers",
                            Description = "Portable storage device",
                            Manufacturer = "Seagate",
                            Name = "External Hard Drive",
                            Price = 100.0,
                            Stock = 40
                        },
                        new
                        {
                            Id = 15,
                            Category = "Electronics",
                            Description = "4K smart television",
                            Manufacturer = "Samsung",
                            Name = "Smart TV",
                            Price = 900.0,
                            Stock = 8
                        },
                        new
                        {
                            Id = 16,
                            Category = "Audio",
                            Description = "Portable wireless speaker",
                            Manufacturer = "JBL",
                            Name = "Bluetooth Speaker",
                            Price = 120.0,
                            Stock = 30
                        },
                        new
                        {
                            Id = 17,
                            Category = "Wearables",
                            Description = "Wearable fitness tracker",
                            Manufacturer = "Garmin",
                            Name = "Fitness Tracker",
                            Price = 80.0,
                            Stock = 50
                        },
                        new
                        {
                            Id = 18,
                            Category = "Photography",
                            Description = "Quadcopter drone with camera",
                            Manufacturer = "DJI",
                            Name = "Drone",
                            Price = 750.0,
                            Stock = 5
                        },
                        new
                        {
                            Id = 19,
                            Category = "Electronics",
                            Description = "Digital book reader",
                            Manufacturer = "Amazon",
                            Name = "E-Reader",
                            Price = 130.0,
                            Stock = 20
                        },
                        new
                        {
                            Id = 20,
                            Category = "Home",
                            Description = "Wi-Fi enabled smart bulb",
                            Manufacturer = "Philips",
                            Name = "Smart Light",
                            Price = 30.0,
                            Stock = 100
                        },
                        new
                        {
                            Id = 21,
                            Category = "Accessories",
                            Description = "Fast wireless charging pad",
                            Manufacturer = "Anker",
                            Name = "Wireless Charger",
                            Price = 40.0,
                            Stock = 60
                        },
                        new
                        {
                            Id = 22,
                            Category = "Photography",
                            Description = "Rugged action camera",
                            Manufacturer = "GoPro",
                            Name = "Action Camera",
                            Price = 250.0,
                            Stock = 14
                        },
                        new
                        {
                            Id = 23,
                            Category = "Accessories",
                            Description = "Ergonomic laptop stand",
                            Manufacturer = "Rain Design",
                            Name = "Laptop Stand",
                            Price = 70.0,
                            Stock = 30
                        },
                        new
                        {
                            Id = 24,
                            Category = "Audio",
                            Description = "True wireless stereo earbuds",
                            Manufacturer = "Apple",
                            Name = "Wireless Earbuds",
                            Price = 200.0,
                            Stock = 25
                        },
                        new
                        {
                            Id = 25,
                            Category = "Accessories",
                            Description = "High-capacity power bank",
                            Manufacturer = "RAVPower",
                            Name = "Portable Charger",
                            Price = 60.0,
                            Stock = 35
                        });
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingHouseNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipHouseNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("SalesOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingCity = "Klagenfurt",
                            BillingCountry = "Austria",
                            BillingHouseNum = "1",
                            BillingName = "Martha Liu",
                            BillingState = "Kärnten",
                            BillingStreet = "Lausing",
                            BillingZipCode = "9020",
                            CustomerId = 4,
                            OrderDate = new DateTime(2025, 3, 25, 19, 26, 56, 480, DateTimeKind.Local).AddTicks(990),
                            ShipCity = "Klagenfurt",
                            ShipCountry = "Austria",
                            ShipHouseNum = "1",
                            ShipName = "Andre Ludwig",
                            ShipState = "Kärnten",
                            ShipStreet = "Lausing",
                            ShipZipCode = "9020",
                            ShippedDate = new DateTime(2025, 3, 25, 19, 26, 56, 480, DateTimeKind.Local).AddTicks(1036)
                        });
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.ShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShippingAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Springfield",
                            Country = "USA",
                            HouseNum = "1A",
                            State = "IL",
                            Street = "123 Main St",
                            ZipCode = "62704"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineShop.ApiService.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineShop.ApiService.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.ApiService.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineShop.ApiService.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.CartItem", b =>
                {
                    b.HasOne("OnlineShop.ApiService.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.ApiService.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.Customer", b =>
                {
                    b.HasOne("OnlineShop.ApiService.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("OnlineShop.ApiService.Models.BillingAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.ApiService.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.ApiService.Models.ShippingAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("BillingAddress");

                    b.Navigation("Cart");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.OrderDetail", b =>
                {
                    b.HasOne("OnlineShop.ApiService.Models.SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.ApiService.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("OnlineShop.ApiService.Models.SalesOrder", b =>
                {
                    b.HasOne("OnlineShop.ApiService.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
